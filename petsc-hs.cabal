-- Initial petsc-hs.cabal generated by cabal init.  For further 
-- documentation, see http://haskell.org/cabal/users-guide/

name:                petsc-hs
version:             0.1.0.0
synopsis:            Haskell bindings for the scientific computation library PETSc
description:         Lambdas and large linear systems, oh my         
homepage:            https://github.com/ocramz/petsc-hs
license:             LGPL-3
license-file:        LICENSE
author:              Marco Zocca
maintainer:          zocca.marco@gmail.com
copyright:           (c) 2015 Marco Zocca
category:            Numerical
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

source-repository head
  type:     git
  location: https://github.com/ocramz/petsc-hs.git 

library
  exposed-modules:     Numerical.PETSc
  -- other-modules:       
  -- other-extensions:    ConstraintKinds, ForeignFunctionInterface, QuasiQuotes, TemplateHaskell, GeneralizedNewtypeDeriving, StandaloneDeriving, DeriveDataTypeable, DataKinds, MultiParamTypeClasses, BangPatterns, FunctionalDependencies, FlexibleInstances, TypeFamilies, FlexibleContexts, RankNTypes, CPP
  build-depends:       base >=4.7 && <=4.8.1.0,
                       template-haskell,
                       containers >=0.5 && <0.6, 
                       QuickCheck >=2.7,
                       bytestring >=0.10 && <0.11, 
                       transformers,
                       transformers-base,
                       contravariant,
                       monad-control,
                       comonad,
                       semigroupoids,
                       profunctors,
                       free,
                       inline-c > 0.5.0.0,
                       vector,
                       mtl,
                       async,
                       either,
                       StateVar,
                       mmorph,
                       prelude-extras,
                       void,
                       MonadRandom,
                       managed > 1.0
  -- main-is:             Internal.hs, InlineC.hs
  hs-source-dirs:      src/
  -- c-source-dirs:       src/Numerical/PETSc/Raw
  -- c-sources:           src/Numerical/PETSc/Internal.c, src/Numerical/PETSc/InlineC.c
  pkgconfig-depends:   PETSc
  pkgconfig-depends:   mpich
  -- -- lib-dirs:      lib/
  -- -- hs-source-dirs:      src
  -- -- build-tools:         chs
  default-language:    Haskell2010
  
  extra-include-dirs:  /Users/ocramz/petsc-3.6.2/include, /Users/ocramz/petsc-3.6.2/arch-darmin-c-debug
  extra-lib-dirs:      lib/ /Users/ocramz/petsc-3.6.2/lib

  -- -- ghc-options:         -O2 -Wall -lpetsc -lmpich
  -- extra-libraries:     petsc mpich

executable example
  default-language:    Haskell2010
  main-is:             TestMain2.hs
  hs-source-dirs:      examples
  extra-lib-dirs:      lib/
  -- extra-libraries:     petsc mpich



-- executable foo
--   main-is:             Main.hs, Foo.hs, Bar.hs
--   hs-source-dirs:      src
--   -- Here the corresponding C sources must be listed for every module
--   -- that uses C code.  In this example, Main.hs and Bar.hs do, but
--   -- Foo.hs does not.
--   c-sources:           src/Main.c, src/Bar.c
--   -- These flags will be passed to the C compiler
--   cc-options:          -Wall -O2
--   -- Libraries to link the code with.
--   extra-libraries:     m
--   ...

-- If we were to compile the above manually we could do:

-- $ ghc -c Main.hs
-- $ cc -c Main.c -o Main_c.o
-- $ ghc Foo.hs
-- $ ghc Bar.hs
-- $ cc -c Bar.c -o Bar_c.o
-- $ ghc Main.o Foo.o Bar.o Main_c.o Bar_c.o -lm -o Main




--  -- makefile to implement : 

-- PETSC_DIR_ARCH = ${PETSC_DIR}/arch-darwin-c-debug
-- PETSC_DIR_ARCH_INCLUDE = ${PETSC_DIR_ARCH}/include
-- SRCDIR = ${CURDIR}/src/Numerical/PETSc
-- SRCPARDIR = ${CURDIR}/src/Numerical
-- CBITS = ${CURDIR}/src/cbits
-- TESTDIR = ${CURDIR}/test
-- LIBDIR = ${CURDIR}/lib
-- EXAMPLEDIR = ${CURDIR}/examples

-- main:
-- 	make step1
-- 	make step2a
-- 	make step2b
-- 	make step3

-- step1:
-- 	ghc  ${SRCDIR}/Raw/Internal.hs ${SRCDIR}/Raw/InlineC.hs -isrc/

-- step2a:
-- 	cc -c ${SRCDIR}/Raw/Internal.c -o ${LIBDIR}/Internal_c.o -I${PETSC_DIR_ARCH}/include -I${PETSC_DIR}/include

-- step2b:
-- 	cc -c ${SRCDIR}/Raw/InlineC.c -o ${LIBDIR}/InlineC_c.o -I${PETSC_DIR_ARCH}/include -I${PETSC_DIR}/include

-- step3:
-- 	ghci ${EXAMPLEDIR}/TestMain2.hs ${SRCDIR}/Raw/InlineC.hs  ${LIBDIR}/InlineC_c.o  ${LIBDIR}/Internal_c.o -isrc/ -L${PETSC_DIR_ARCH}/lib -lpetsc -lmpich
