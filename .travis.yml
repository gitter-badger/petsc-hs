# Use new container infrastructure to enable caching
sudo: 
  false

# Choose a lightweight base image (C); we provide our own build tools.
language: 
  c
# language: haskell

matrix:
  allow_failures:
    - env: GHCVER=7.8.3  CABALVER=1.18 COVOPT=--enable-library-coverage
    # - env: GHCVER=7.6.3  CABALVER=1.18 COVOPT=--enable-library-coverage
    #- env: GHCVER=head   CABALVER=head COVOPT=--enable-coverage

# The different configurations we want to test. You could also do things like
# change flags or use --stack-yaml to point to a different file.

env:
  - PETSC_DIR=/home/travis/build/ocramz/petsc-hs/petsc/petsc-3.6.2
  - PETSC_ARCH=arch-linux2-c-debug
  # - GHCVER=7.10.1 CABALVER=1.22 COVOPT=--enable-coverage
  - GHCVER=7.8.3  CABALVER=1.18 COVOPT=--enable-library-coverage
  # - GHCVER=7.6.3  CABALVER=1.18 COVOPT=--enable-library-coverage
  #- GHCVER=head   CABALVER=head COVOPT=--enable-coverage
  - ARGS=""
  - ARGS="--resolver lts-2"
  - ARGS="--resolver lts-3"
  - ARGS="--resolver lts"
  - ARGS="--resolver nightly"


# Install GFortran via apt-get.
# See http://docs.travis-ci.com/user/apt/ for more information
addons:
  apt:
    packages:
    - gfortran            # needed to build PETSc
    - libgmp-dev          # needed by GMP

before_install:
  # Download and unpack the stack executable
  - mkdir -p ~/.local/bin
  - export PATH=$HOME/.local/bin:$PATH
  - travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'

  # Download and install PETSc, MPICH, GFORTRAN, FBLASLAPACK
  # - ./download-petsc.sh
  # - ./install-petsc.sh

  - mkdir -p petsc     ### 
  - cd petsc
  - wget http://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-lite-3.6.2.tar.gz
  - tar xvf petsc-lite-3.6.2.tar.gz
  - cd petsc-3.6.2
  - ./configure --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --download-fblaslapack --download-mpich
  - make PETSC_DIR=$PETSC_DIR PETSC_ARCH=$PETSC_ARCH all
  - cd ../..

  # - sudo add-apt-repository -y ppa:hvr/ghc
  # - travis_retry sudo apt-get update
  # - travis_retry sudo apt-get install cabal-install-$CABALVER ghc-$GHCVER
  # - export PATH=/opt/ghc/$GHCVER/bin:$PATH
  # - echo "Check version again"
  # - ghc   --version
  # - cabal --version


  # This line does all of the work: installs GHC if necessary, build the library,
  # executables, and test suites, and runs the test suites. --no-terminal works
  # around some quirks in Travis's terminal implementation.
  script: 
    stack $ARGS --no-terminal --install-ghc test --haddock

cache:
  directories:
  - petsc
  - $HOME/.stack

# install:
  # - travis_retry cabal-$CABALVER install --only-dependencies --force-reinstalls --enable-tests
  # #- travis_retry cabal-$CABALVER install --only-dependencies --force-reinstalls --enable-tests ${COVOPT}

#script:
# - bash testit.sh
# - echo "All done."

# script:
  # - make
  # # -v2 provides useful information for debugging
  # #- cabal-$CABALVER configure --enable-tests ${COVOPT} --enable-benchmarks -v2
  # - cabal-$CABALVER configure --enable-tests --enable-benchmarks -v2

  # # this builds all libraries and executables
  # # (including tests/benchmarks)
  # - cabal-$CABALVER build
  # - find . -iname '*.tix'
  # - find . -iname '*.mix'

  # #- cabal-$CABALVER test --keep-tix-files
  # - cabal-$CABALVER test
  # - find . -iname '*.tix'

  # - bash testit.sh
  # - echo "Unit tests successful!"

  # - cabal-$CABALVER check

  # # tests that a source-distribution can be generated
  # - cabal-$CABALVER sdist

  # # check that the generated source-distribution can be built & installed
  # - export SRC_TGZ=$(cabal info . | awk '{print $2 ".tar.gz";exit}') ;
  #   cd dist/;
  #   if [ -f "$SRC_TGZ" ]; then
  #      cabal install "$SRC_TGZ";
  #   else
  #      echo "expected '$SRC_TGZ' not found";
  #      exit 1;
  #   fi
  # - echo ${PWD}

#after_script:
#  - echo ${PWD}
#  - find dist -iname '*.tix'
#  - travis_retry cabal install codecov-haskell hpc-coveralls
#  - codecov-haskell                               json-autotype-random-test json-autotype-qc-test 
#  - hpc-coveralls   --repo-token ${COVERALLS_KEY} json-autotype-random-test json-autotype-qc-test
#
